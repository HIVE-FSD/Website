<% 
function formatDate(dateString) {
  const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  
  const date = new Date(dateString);
  const month = months[date.getMonth()];
  const day = date.getDate();
  const year = date.getFullYear();

  const suffix = getDaySuffix(day);

  return `${month} ${day}${suffix} ${year}`;
}

function formatJoined(number) {
  if (number >= 1000000) {
    return (number / 1000000).toFixed(1) + 'M';
  } else if (number >= 1000) {
    return (number / 1000).toFixed(1) + 'K';
  } else {
    return number.toString();
  }
}

function getDaySuffix(day) {
  if (day >= 11 && day <= 13) {
    return "th";
  }
  switch (day % 10) {
    case 1: return "st";
    case 2: return "nd";
    case 3: return "rd";
    default: return "th";
  }
}
%>

<div class="buzzSpace-main">
  <div class="buzzSpace-header">
    <img class="space-cover" src="<%= `uploads/${buzzSpace.cover}` %>" alt="">
    <div class="buzzSpace-header-inner">
      <div class="buzzSpace-header-inner-left">
        <div class="space-logo">
          <img src="<%= `uploads/${buzzSpace.logo}` %>" alt="">
        </div>
        <div class="text">
          <h1>
            <%= buzzSpace.name %>
          </h1>
          <div>
            <a href="/category/<%= buzzSpace.category %>">
              <span >
                <%= buzzSpace.category %>
              </span>
            </a>
            <span >
              <%= formatJoined(buzzSpace.numberOfMembersJoined) %> Members 
            </span>
          </div>
        </div>
      </div>
      <div class="buzzSpace-header-inner-right">
        <%  if (user.username == creator.username || isMod ) { %>
          <%- include('components/spaceMembers', {members, buzzSpaceId : buzzSpace._id }) %>
        <% } %>
        <%  if (user.username == creator.username) { %>
          
        <% } else if (!joined) {%>
        <button onclick="joinBuzzSpace('<%= buzzSpace._id %>', '<%= user._id%>')">
          Join
        </button>
        <% }else{%>
          <button onclick="leaveBuzzSpace('<%= buzzSpace._id %>', '<%= user._id%>')">
            Leave
          </button>
          <% } %>
          <% if (joined) { %>
            <a href="<%= `/buzz/newbuzz?buzzSpace=${buzzSpace.name}` %>">
              <button>New Buzz</button>
            </a>                              
          <% } %>
      </div>
    </div>
  </div>
  
  <div class="buzzSpace-content">
    
    <div class="space-buzzs-container">
      <input type="text" oninput="filterBuzzes(this)" placeholder="Search Buzz">
      <% buzzes.map((buzz, index)=> { %>
        <%-  include('components/buzz', { buzz: buzz, index: index })  %>
        <% }); %>
      </div>
      <div class="buzzSpace-info">
        <h2>
          About 
          <%  if (user.username == creator.username) { %>
          <button class="edit-btn" onclick="openEditModal(this)" >
            <span class="material-symbols-outlined">
              edit
            </span>
          </button>
          <div class="editbuzzSapce-cover">
            <div class="editbuzzSapce">
              <h2>About</h2>
              <textarea name="" id="" cols="30" rows="5"><%= buzzSpace.description %></textarea>
              <div class="rules-input-main">
                <h1>Rules</h1>
                <div class="rules-container">
                    <div class="rule-input-group">
                        <input type="text" name="rule" placeholder="Enter a rule" value="<%= buzzSpace.rules[0] %>" required >
                    </div>
                    <% buzzSpace.rules.slice(1).map((rule, index) => { %>
                      <div class="rule-input-group">
                          <input type="text" name="rule" placeholder="Enter a rule" value="<%= rule %>" >
                          <button type="button" onclick="removeRuleInput(this)">
                            <span class="material-symbols-outlined">
                            remove
                            </span>
                        </button>
                      </div>
                  <% }); %>
                  
                </div>
        
                <button type="button" onclick="addRuleInput(this)">Add Rule</button>
            </div>
              <div class="btn-container">
                <button onclick="editForm(this, '<%= user._id %>', '<%= buzzSpace.id %>')" >Done</button>
                <button onclick="closeEditModal(this)">Cancel</button>
              </div>
            </div>
          </div>  
          <% } %>
        </h2>
        <p>
          <%= buzzSpace.description %>
        </p>
        <h5>created by</h5>
        <div class="space-info-creator">
          
        <%- include('components/profileCard', { buzzer: creator.info, username: "" }) %>

          </div>
            <h5>created on</h5>
            <div class="space-info-creator">
                <span class="material-symbols-outlined">
                    event
                  </span>
                <p><%= formatDate(buzzSpace.createdOn) %></p>
              </div>
              <div class="info-dropdown">

                <h2 class="drop-heading" onclick="expandInfo(this)" >
                  Rules 
                  <span class="material-symbols-outlined" >
                    expand_more
                  </span>
                </h2>
                <ol class="space-info-rules" >
                  <% buzzSpace.rules.map(rule => { %>
                    <li><%= rule %></li>
                    <% }) %>
                </ol>
              </div>
              <div class="info-dropdown">

                <h2 class="drop-heading" onclick="expandInfo(this)" >
                  Moderators 
                  <span class="material-symbols-outlined" >
                    expand_more
                  </span>
                </h2>
                <ul class="space-info-rules" >
                  <% buzzSpace.moderators.map((moderator) => { %>
                    <li>
                      <% if (user.username == creator.username) { %>
                        <%- include('components/profileCard', { buzzer: moderator.info, username: moderator.username }) %> 
                        <button class="edit-btn" onclick="demoteModerator( '<%= buzzSpace._id %>','<%= moderator._id %>')" >
                          <span class="material-symbols-outlined">
                            remove_moderator
                          </span>
                        </button>
                      <% } else { %>
                        <div style="margin: auto;" >
                          <%- include('components/profileCard', { buzzer: moderator.info, username: '' }) %> 
                        </div>
                      <% } %>
                    </li>
                  <% }) %>                  
                </ul>
              </div>
              
              <%  if (user.username !== creator.username && !isMod) { %>
              <button onclick="requestPromotion(this, '<%= user._id %>', '<%= buzzSpace.id %>')" >
                <span class="material-symbols-outlined">
                  add_moderator
                </span>
                Apply as Moderator
              </button>
              <% } %>
            </div>
          
    </div>

</div>
<script>
  function filterBuzzes(input) {
    const searchValue = input.value.toLowerCase();
    const buzzSpaceContent = input.closest('.space-buzzs-container');
    const buzzContainers = buzzSpaceContent.querySelectorAll('.buzz-super');

    buzzContainers.forEach(function(buzzContainer) {
      const textContainer = buzzContainer.querySelector('.buzz-top')

      const buzzText = textContainer.textContent.toLowerCase();
      if (buzzText.includes(searchValue)) {
        buzzContainer.style.display = 'block';
      } else {
        buzzContainer.style.display = 'none';
      }
    });
  }

  function openEditModal(element) {
    const editCoverDiv = element.closest('.buzzSpace-info').querySelector('.editbuzzSapce-cover');

    editCoverDiv.classList.add('modal');
  }

  function closeEditModal(element) {
    const editCoverDiv = element.closest('.editbuzzSapce-cover');
    const inputs = editCoverDiv.querySelectorAll('textarea, input');
    inputs.forEach(input => {
      input.value = input.defaultValue;
    });
    editCoverDiv.classList.remove('modal');
  }


  function addRuleInput(btn) {
    const rulesContainerMain = btn.closest('.rules-input-main');
    const rulesContainer = rulesContainerMain.querySelector('.rules-container');
    const newInputGroup = document.createElement('div');
    newInputGroup.classList.add('rule-input-group');
    newInputGroup.innerHTML = `
        <input type="text" name="rule" placeholder="Enter a rule">
        <button type="button" onclick="removeRuleInput(this)">
            <span class="material-symbols-outlined">
            remove
            </span>
        </button>
    `;
    rulesContainer.appendChild(newInputGroup);
  }

  const expandInfo = (head) => {
    head.closest(".info-dropdown").classList.toggle('expand')
  }

  async function joinBuzzSpace(buzzSpaceId, userId) {
    const url = '/buzzspace/joinBuzzSpace';
    const data = { buzzSpaceId, userId };

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorMessage = await response.json();
        throw new Error(errorMessage.message || 'Failed to join BuzzSpace');
      }

      const responseData = await response.json();
      window.location.reload();

    } catch (error) {
      console.error('Error joining BuzzSpace:', error.message);
    }
  }
  
  async function leaveBuzzSpace(buzzSpaceId, userId) {
    const url = '/buzzspace/leaveBuzzSpace';
    const data = { buzzSpaceId, userId };

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorMessage = await response.json();
        throw new Error(errorMessage.message || 'Failed to join BuzzSpace');
      }

      const responseData = await response.json();
      window.location.reload();

    } catch (error) {
      console.error('Error joining BuzzSpace:', error.message);
    }
  }

  const editForm = async (btn, userId, buzzSpaceId) => {
    const editdiv = btn.closest(".editbuzzSapce")
    const description = editdiv.querySelector('textarea').value;
    const rules = Array.from(editdiv.querySelectorAll('.rule-input-group input')).map(input => input.value);

    try {
        const response = await fetch(`editBuzzSpace`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                userId,
                buzzSpaceId,
                rules,
                description
            })
        });

        const data = await response.json();
        window.location.reload()
    } catch (error) {
        console.error('Error:', error);
    }
};


const requestPromotion = async (btn, userId, buzzSpaceId) => {
  try {
      const response = await fetch('/buzzspace/requestPromotion', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({ userId, buzzSpaceId })
      });

      if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message);
      }

      const responseData = await response.json();
      btn.innerHTML = 'Applied!!'
      console.log(responseData)
  } catch (error) {
      console.error('Error:', error.message);
      throw error;
  }
};

const demoteModerator = async (buzzSpaceId, moderatorId) => {
  try {
      const response = await fetch('/buzzspace/demoteModerator', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({ buzzSpaceId, moderatorId })
      });
      
      const data = await response.json();
      window.location.reload()
  } catch (error) {
      console.error('Error demoting moderator:', error);
      throw new Error('Failed to demote moderator');
  }
};

</script>