<% function truncateText(text, maxLength) { if (text.length> maxLength) {
    return text.slice(0, maxLength) + ' <span class="more">...more</span>';
    } else {
    return text;
    }
    }
%>

<% function formatTimeAgo(datetimeString) { 
    const now=new Date(); 
    const commentedOn=new Date(datetimeString); 
    const diffMs=now - commentedOn;
    const diffSeconds=Math.floor(diffMs / 1000);
    const diffMinutes=Math.floor(diffSeconds /60); 
    const diffHours=Math.floor(diffMinutes / 60);
    const diffDays=Math.floor(diffHours / 24); const
    diffYears=Math.floor(diffDays / 365); if (diffYears> 0) {
    return `${diffYears} year${diffYears > 1 ? 's' : ''} ago`;
    } else if (diffDays > 0) {
    return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
    } else if (diffHours > 0) {
    return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
    } else if (diffMinutes > 0) {
    return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;
    } else {
    return `${diffSeconds} second${diffSeconds > 1 ? 's' : ''} ago`;
    }
    } 
%>

<div class="buzz-super" >
    <div class="buzz">
        <div class="votes-container">
            <span class="material-symbols-outlined add-vote-btn vote-btn <%= buzz.upvoted && 'plus' %>" onclick="upVote(this, '<%= buzz.id %>', 'buzz', '<%= user.id %>')">
                expand_less
            </span>
            <span class="votes-value <%= buzz.downvoted && 'minus' %> <%= buzz.upvoted && 'plus' %> "><%= buzz.votes %></span>
            <span class="material-symbols-outlined remove-vote-btn vote-btn <%= buzz.downvoted && 'minus' %> " onclick="downVote(this, '<%= buzz.id %>', 'buzz', '<%= user.id %>')">
                expand_more
            </span>
        </div>
        <span class="material-symbols-outlined buzz-close" onclick="closeContent(this)">close</span>
        <div class="buzz-main">
            <div class="buzz-top" onclick="expandContent(this)">
                <h1>
                    <%= buzz.title %>
                </h1>
                
            </div>
            <p class="buzz-description" onclick="expandContent(this)"><%- truncateText(buzz.buzz, 75) %></p>
            <div class="buzz-functions">
                <span class="buzz-functions-left">
                    <div>
                        Posted by
                        <%- include('profileCard', { buzzer: buzz.buzzer, username: '' }) %>
                    </div>
                    <%= formatTimeAgo(buzz.buzzedon) %> at <a href=<%= "/buzzspace/"+buzz.buzzSpace  %>><%= buzz.buzzSpace %></a>
                </span>
                <div class="buzz-inner-functions">
                    <div onclick="toggleCommentArea(this)"><span class="material-symbols-outlined">comment</span> Comment</div>
                    <div><span class="material-symbols-outlined">flag</span> Report</div>
                    <% if (buzz.canEdit || buzz.canDelete) { %>
                    <div class="buzz-actions-container">
                        <span class="material-symbols-outlined buzz-actions-toggle">
                            more_vert
                        </span>
                        <div class="buzz-actions">
                            <% if (buzz.canDelete) { %>
                            <div onclick="deleteBuzz(this, '<%= user._id %>', '<%= buzz.id %>')">
                                <span class="material-symbols-outlined">
                                    delete
                                </span>
                                Delete
                            </div>
                            <% } %>

                            <% if (buzz.canEdit) { %>
                            <div onclick="openBuzzEditModal(this)" >
                                <span class="material-symbols-outlined">
                                    edit
                                </span>
                                Edit
                            </div>
                            <% } %>
                        </div>
                    </div>
                    <% } %>
                </div>
            </div>
            <div class="buzz-comment-section">
                <div class="buzz-comment-area" style="display: none;">
                    <textarea class="buzz-commentText" rows="2" cols="50"></textarea>
                    <div class="buzz-comment-btn-container">
                        <button onclick="buzzComment(this, '<%= buzz.id %>')">Comment</button>
                        <button onclick="cancelComment(this)">Cancel</button>
                    </div>
                </div>
                <h3 class="buzz-comment-title" >Comments</h3>
                <ul class="buzz-comments-list">
                    <%- include('buzzComments', { comments: buzz.comments }) %>
                </ul>
            </div>
        </div>
        <div class="editbuzz-cover">
            <div class="editbuzz">
                <textarea rows="5"><%= buzz.buzz %></textarea>
                <div class="btn-container">
                    <button type="reset" onclick="updateBuzz(this, '<%= user._id %>', '<%= buzz.id %>')">Submit</button>
                    <button type="reset" onclick="closeBuzzEditModal(this)" >Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    function openBuzzEditModal(element) {
        const editCoverDiv = element.closest('.buzz-super').querySelector('.editbuzz-cover');

        editCoverDiv.classList.add('modal');
    }
    function closeBuzzEditModal(element) {
        const editCoverDiv = element.closest('.editbuzz-cover');
        const textarea = editCoverDiv.querySelector('textarea');
        textarea.value = textarea.defaultValue;
        editCoverDiv.classList.remove('modal');
    }
    
    function updateBuzz(btn, userId, buzzID) {
        
        const editBuzzDiv = btn.closest(".editbuzz");
        const buzzText = editBuzzDiv.querySelector("textarea").value;

        fetch(`/buzz/editBuzz`, {
            method: 'POST',
            body: JSON.stringify({
                buzz: buzzText,
                userId,
                buzzID
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Buzz Edited', data);
            window.location.reload();
        })
        .catch(error => {
            console.error('Error editing Buzz:', error);
    });
    }

    function deleteBuzz(btn, userId, buzzId){
        console.log(buzzId)
        fetch(`buzz/deleteBuzz`, {
            method: 'DELETE',
            body: JSON.stringify({
                userId,
                buzzId
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Buzz Deleted', data);
            window.location.reload();
        })
        .catch(error => {
            console.error('Error Deleting Buzz:', error);
    });
    }


    function buzzComment(commentButton, buzzID) {
        const buzzSuper = commentButton.closest('.buzz-super');
        const commentText = buzzSuper.querySelector('.buzz-commentText').value;
        const buzzer = "<%= user._id %>";

        fetch('/buzz/newcomment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                buzzId: buzzID,
                comment: commentText,
                buzzer: buzzer
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Comment saved:', data);
                window.location.reload();
            })
            .catch(error => {
                console.error('Error saving comment:', error);
                // Handle error if necessary
            });
    }


    function expandContent(buzz) {
        const buzzSuper = buzz.closest('.buzz-super');
        buzzSuper.classList.add('modal');
        const paragraph = buzzSuper.querySelector('.buzz-description')
        paragraph.innerHTML = `<%= buzz.buzz %>`;
    }

    function closeContent(close) {
        const buzzSuper = close.closest('.buzz-super');
        const paragraph = buzzSuper.querySelector('.buzz-description');
        const commentArea = buzzSuper.querySelector('.buzz-comment-area');
        commentArea.style.display = 'none';
        buzzSuper.classList.remove('modal');
        paragraph.innerHTML = `<%- truncateText(buzz.buzz, 75) %>`;
    }

    function toggleCommentArea(commentButton) {
        const buzzSuper = commentButton.closest('.buzz-super');
        const commentArea = buzzSuper.querySelector('.buzz-comment-area');
        commentArea.style.display = 'block';
        expandContent(buzzSuper.querySelector('.buzz-description'));
    }

    function toggleReplyArea(commentButton) {
        const buzzSuper = commentButton.closest('.buzz-comment-main');
        const commentArea = buzzSuper.querySelector('.buzz-comment-area');
        commentArea.style.display = 'block';
        expandContent(buzzSuper.querySelector('.buzz-description'));
    }
</script>

<script src="js/buzz.js"></script>