<% function formatTimeAgo(datetimeString) { const now=new Date(); const commentedOn=new Date(datetimeString); const
    diffMs=now - commentedOn; const diffSeconds=Math.floor(diffMs / 1000); const diffMinutes=Math.floor(diffSeconds
    /60); const diffHours=Math.floor(diffMinutes / 60); const diffDays=Math.floor(diffHours / 24); const
    diffYears=Math.floor(diffDays / 365); if (diffYears> 0) {
    return `${diffYears} year${diffYears > 1 ? 's' : ''} ago`;
    } else if (diffDays > 0) {
    return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
    } else if (diffHours > 0) {
    return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
    } else if (diffMinutes > 0) {
    return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;
    } else {
    return `${diffSeconds} second${diffSeconds > 1 ? 's' : ''} ago`;
    }
    } %>

    <% for (let i=0; i < comments.length; i++) { %>
        <li>
            <div class="buzz-comment">
                <div class="votes-container">
                    <span class="material-symbols-outlined add-vote-btn vote-btn <%= comments[i].upvoted && 'plus' %> " onclick="upVote(this, '<%= comments[i].id %>', 'comment', '<%= user.id %>')">
                        expand_less
                    </span>
                    <span class="votes-value  <%= comments[i].downvoted && 'minus' %> <%= comments[i].upvoted && 'plus' %> ">
                        <%= comments[i].votes %>
                    </span>
                    <span class="material-symbols-outlined remove-vote-btn vote-btn <%= comments[i].downvoted && 'minus' %> " onclick="downVote(this, '<%= comments[i].id %>', 'comment', '<%= user.id %>')">
                        expand_more
                    </span>
                </div>
                <div class="buzz-comment-main">

                    <div class="comment-header">
                        <span class="comment-user">
                            <span class="material-symbols-outlined">
                                person
                            </span>
                            <%- include('profileCard', { buzzer: comments[i].buzzer, username: '' }) %>
                        </span>
                    </div>
                    <div class="buzz-comment-content">
                        <%= comments[i].comment %>
                    </div>
                    <div class="comment-functions">
                        <span class="comment-time">
                            <%= formatTimeAgo(comments[i].commentedon) %>
                        </span>
                        <div class="comment-inner-functions">
                            <div onclick="toggleReplyArea(this)"><span class="material-symbols-outlined">comment</span>
                                Reply</div>
                            <div><span class="material-symbols-outlined">flag</span> Report</div>
                        </div>
                    </div>
                    <div class="buzz-comment-area" style="display: none;">
                        <textarea class="buzz-commentText" rows="2" cols="50"></textarea>
                        <div class="buzz-comment-btn-container">
                            <button onclick="CommentReply(this, '<%= comments[i].buzz %>', '<%= comments[i].id %>')">Reply</button>
                            <button onclick="cancelReply(this)">Cancel</button>
                        </div>
                    </div>
                    <% if (comments[i].replies && comments[i].replies.length> 0) { %>
                        <ul class="buzz-comment-replies-list">
                            <%- include('buzzComments', { comments: comments[i].replies }) %>
                        </ul>
                        <% } %>
                </div>
            </div>
        </li>
        <% } %>

            <script>
                function CommentReply(commentButton, buzzID, parent) {
                    const buzzSuper = commentButton.closest('.buzz-comment-main');
                    const commentText = buzzSuper.querySelector('.buzz-commentText').value;
                    const buzzer = "<%= user._id %>";

                    fetch('/buzz/newreply', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            buzzId: buzzID,
                            comment: commentText,
                            buzzer: buzzer,
                            parent: parent
                        })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            buzzSuper.querySelector('.buzz-commentText').value = '';
                            buzzSuper.querySelector('.buzz-comment-area').style.display = 'none';
                            window.location.reload()
                        })
                        .catch(error => {
                            console.error('Error saving comment:', error);
                        });
                }
            </script>